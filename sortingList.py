import time

class sortingMethods:
    def __init__(self):
        # self.num = int(input("How many ele do want to add? "))
        # self.arr = [int(input("")) for i in range(self.num)]
        self.arr = [43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,6943,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,6943,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,6943,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,6943,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69,43,2,34,21,54,6,5,76,8,7,9,789,8,34,52,54,34,12,34,35,34,6,457,6,8,67,97,8,9,8709,980,5,98,342,4,2,4,34,5,346,45,7,79,76,8,0,24,9789,76,8,56,98,45,2,34,1,23,54,4,3457,980,0,8,56,7,545,234,3,5,7,76,980,346,45,756,8,78,9,9,9,4,2,32,1,4,23,5,34,56,7,76,9,0,89,0,9,6,5,345,2,4,124,76,54,7,32,78,69,78,9,7,6,4,52,34,2,45,6,8,90,796856,745,43,54,7,453,4,87,976834,5,4,867,76,54,645,345,5,34,5,4,6,57,6,897,0,980,8,6,7,75,34,53,45,4,645,7,6,87,69]
        self.num = len(self.arr)
        print("Original Array: ",self.arr)
        

    def selectionSort(self):
        start = time.time()
        n = self.num
        for i in range(n):
            findMin = min(self.arr[i:])
            minIndex = self.arr.index(findMin,i)
            self.arr[i],self.arr[minIndex] = self.arr[minIndex],self.arr[i]
        end = time.time()
        print("Selection sort took ",(end-start),"sec to execute.")        
        return self.arr
    
    def insertionSort(self,n=1):
        start = time.time()
        if n >= 1:
            end = time.time()
            print("Insertion sort took ",(end-start),"sec to execute.")
            return self.arr
        
        self.insertionSort(n-1)

        currentEle = self.arr[n]
        pos = n
        while pos > 0 and currentEle > self.arr[pos-1]:
            self.arr[pos] = self.arr[pos-1]
            pos-=1

        if n == self.num:
            end = time.time()
            print("Insertion sort took ",(end-start),"sec to execute.")         
        return self.arr

    def bubbleSort(self,n=None):
        start = time.time()
        if n == None:
            n = self.num
        elif n > 1:
            return self.arr 
        for i in range(n-1):
            if self.arr[i] > self.arr[i+1]:
                self.arr[i],self.arr[i+1] = self.arr[i+1],self.arr[i]
        end = time.time()
        print("Insertion sort took ",(end-start),"sec to execute.")        
        return self.bubbleSort(n-1)

    def mergeSort(self,arr=None):
        start = time.time()
        if arr == None:
            arr = self.arr
        n = len(arr)
        if n > 1:
            mid = n // 2
            leftList = arr[:mid]
            rightList = arr[mid:]
            self.mergeSort(leftList)
            self.mergeSort(rightList)
            leftIndex,rightIndex,arrIndex = 0,0,0
            while leftIndex < len(leftList) and rightIndex < len(rightList):
                if leftList[leftIndex] >rightList[rightIndex]:
                    arr[arrIndex] = rightList[rightIndex]
                    rightIndex+=1
                    arrIndex+=1
                else:
                    arr[arrIndex] = leftList[leftIndex]
                    leftIndex+=1
                    arrIndex+=1
            while leftIndex < len(leftList):
                arr[arrIndex] = leftList[leftIndex]
                leftIndex+=1
                arrIndex+=1
            while rightIndex < len(rightList):
                arr[arrIndex] = rightList[rightIndex]
                rightIndex+=1
                arrIndex+=1
        if arr == self.arr:
            end = time.time()
            print("Merge sort took ",(end-start),"sec to execute.")        
        return arr


s = sortingMethods()

while True:
    print(" 1. Selection Sort\n",
            "2. Insertion Sort\n",
            "3.Bubble Sort\n",
            "4.MergerSort\n",
            "5.Exit")
    opration = int(input("Which opration do you Want to perfomr? "))
    if opration == 1:
        print("Sorting List using Selection sort: ",s.selectionSort())
    elif opration == 2:
        print("Sorting List using Insertion sort: ",s.insertionSort())
    elif opration == 3:
        print("Sorted List using Bubble sort: ",s.bubbleSort())
    elif opration == 4:
        print("Sorted List using Merge sort: ",s.mergeSort())
    elif opration == 5:
        break
    else:
        print("Enter valid number")